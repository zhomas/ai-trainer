{"ast":null,"code":"var _jsxFileName = \"/home/tomw/ai-trainer/client/src/modal/Modal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./modal.module.css\";\nimport { connect } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = _ref => {\n  _s();\n\n  let {\n    show,\n    reasons,\n    selected,\n    select\n  } = _ref;\n  const [otherReason, setOtherReason] = useState(\"\");\n\n  const handleSubmit = () => {\n    const reasonIDs = reasons.map(r => r.id).filter(id => !!selected[id]);\n    const other = otherReason ? {\n      id: nanoid(),\n      label: otherReason\n    } : undefined;\n  };\n\n  if (!show) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.modal,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Why\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: reasons.map((r, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [r.label, /*#__PURE__*/_jsxDEV(\"input\", {\n          value: r.id,\n          checked: !!selected[r.id],\n          onChange: () => select(r.id),\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Other:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: otherReason,\n        onChange: e => setOtherReason(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"vATWs6muNbpI7GAYUZHboPuMqgU=\");\n\n_c = Modal;\n\nconst mapStateToProps = state => {\n  return {\n    show: state.app.screen === \"modal\",\n    reasons: Object.values(state.app.reasons),\n    selected: state.modal.selected\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    select: id => {\n      dispatch(toggleReason({\n        id\n      }));\n    }\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/modal/Modal.tsx"],"names":["React","useState","styles","connect","toggleReason","nanoid","Modal","show","reasons","selected","select","otherReason","setOtherReason","handleSubmit","reasonIDs","map","r","id","filter","other","label","undefined","modal","i","e","target","value","mapStateToProps","state","app","screen","Object","values","mapDispatchToProps","dispatch","connector"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport {\n  AppDispatch,\n  AppState,\n  useAppDispatch,\n  useAppSelector,\n} from \"../store\";\nimport styles from \"./modal.module.css\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { nanoid } from \"nanoid\";\ntype Props = ConnectedProps<typeof connector>;\n\nconst Modal: FC<Props> = ({ show, reasons, selected, select }) => {\n  const [otherReason, setOtherReason] = useState(\"\");\n\n  const handleSubmit = () => {\n    const reasonIDs = reasons.map((r) => r.id).filter((id) => !!selected[id]);\n    const other = otherReason\n      ? { id: nanoid(), label: otherReason }\n      : undefined;\n  };\n\n  if (!show) return null;\n\n  return (\n    <div className={styles.modal}>\n      <h3>Why</h3>\n      <div>\n        {reasons.map((r, i) => (\n          <label>\n            {r.label}\n            <input\n              value={r.id}\n              checked={!!selected[r.id]}\n              onChange={() => select(r.id)}\n              type=\"checkbox\"\n            />\n          </label>\n        ))}\n      </div>\n      <label>\n        Other:\n        <input\n          type=\"text\"\n          value={otherReason}\n          onChange={(e) => setOtherReason(e.target.value)}\n        />\n      </label>\n      <div>\n        <button>Cancel</button>\n        <button>Confirm</button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    show: state.app.screen === \"modal\",\n    reasons: Object.values(state.app.reasons),\n    selected: state.modal.selected,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\n  return {\n    select: (id: string) => {\n      dispatch(toggleReason({ id }));\n    },\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n"]},"metadata":{},"sourceType":"module"}