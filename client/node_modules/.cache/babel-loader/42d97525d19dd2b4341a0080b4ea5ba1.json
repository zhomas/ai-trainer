{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { createAppThunk } from \"./store\";\nimport * as modal from \"./modal/modal.slice\";\nconst initialState = {\n  imageID: 0,\n  screen: \"pick\",\n  marked: [],\n  reasons: [{\n    id: \"bg\",\n    label: \"Background\"\n  }, {\n    id: \"eyes\",\n    label: \"Eyes\"\n  }]\n};\nconst appSlice = createSlice({\n  name: \"trainer\",\n  initialState,\n  reducers: {\n    real: state => {\n      state.imageID = (state.imageID + 1) % 16;\n    },\n    unreal: state => {\n      state.screen = \"modal\";\n    },\n    confirm: (state, action) => {\n      const {\n        reasonIDs,\n        other\n      } = action.payload;\n      const mark = {\n        imageID: state.imageID,\n        reasonIDs\n      };\n\n      if (other) {\n        state.reasons.push(other);\n        mark.reasonIDs.push(other.id);\n      }\n\n      state.marked.push(mark);\n      state.screen = \"pick\";\n      state.imageID = (state.imageID + 1) % 16;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(modal.cancel, state => {\n      state.screen = \"pick\";\n    });\n  }\n});\nexport const initialise = createAppThunk(\"trainer/init\", async () => {\n  const response = await axios.get(\"http://localhost:3000/api/v1/image?id=1\", {\n    responseType: \"stream\"\n  });\n  console.log(response);\n});\nexport const {\n  confirm,\n  real,\n  unreal\n} = appSlice.actions;\nexport default appSlice.reducer;","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/app.slice.ts"],"names":["createSlice","axios","createAppThunk","modal","initialState","imageID","screen","marked","reasons","id","label","appSlice","name","reducers","real","state","unreal","confirm","action","reasonIDs","other","payload","mark","push","extraReducers","builder","addCase","cancel","initialise","response","get","responseType","console","log","actions","reducer"],"mappings":"AAAA,SACEA,WADF,QAKO,kBALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAmBC,cAAnB,QAAyC,SAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AAaA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,OAAO,EAAE,CADwB;AAEjCC,EAAAA,MAAM,EAAE,MAFyB;AAGjCC,EAAAA,MAAM,EAAE,EAHyB;AAIjCC,EAAAA,OAAO,EAAE,CACP;AAAEC,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GADO,EAEP;AAAED,IAAAA,EAAE,EAAE,MAAN;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAFO;AAJwB,CAAnC;AAUA,MAAMC,QAAQ,GAAGX,WAAW,CAAC;AAC3BY,EAAAA,IAAI,EAAE,SADqB;AAE3BR,EAAAA,YAF2B;AAG3BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAGC,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACV,OAAN,GAAgB,CAACU,KAAK,CAACV,OAAN,GAAgB,CAAjB,IAAsB,EAAtC;AACD,KAHO;AAIRW,IAAAA,MAAM,EAAGD,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACT,MAAN,GAAe,OAAf;AACD,KANO;AAORW,IAAAA,OAAO,EAAE,CACPF,KADO,EAEPG,MAFO,KAGJ;AACH,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAAuBF,MAAM,CAACG,OAApC;AACA,YAAMC,IAAY,GAAG;AAAEjB,QAAAA,OAAO,EAAEU,KAAK,CAACV,OAAjB;AAA0Bc,QAAAA;AAA1B,OAArB;;AAEA,UAAIC,KAAJ,EAAW;AACTL,QAAAA,KAAK,CAACP,OAAN,CAAce,IAAd,CAAmBH,KAAnB;AACAE,QAAAA,IAAI,CAACH,SAAL,CAAeI,IAAf,CAAoBH,KAAK,CAACX,EAA1B;AACD;;AAEDM,MAAAA,KAAK,CAACR,MAAN,CAAagB,IAAb,CAAkBD,IAAlB;AACAP,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACAS,MAAAA,KAAK,CAACV,OAAN,GAAgB,CAACU,KAAK,CAACV,OAAN,GAAgB,CAAjB,IAAsB,EAAtC;AACD;AAtBO,GAHiB;AA2B3BmB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,KAAK,CAACwB,MAAtB,EAA+BZ,KAAD,IAAW;AACvCA,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACD,KAFD;AAGD;AA/B0B,CAAD,CAA5B;AAkCA,OAAO,MAAMsB,UAAU,GAAG1B,cAAc,CAAC,cAAD,EAAiB,YAAY;AACnE,QAAM2B,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAN,CAAU,yCAAV,EAAqD;AAC1EC,IAAAA,YAAY,EAAE;AAD4D,GAArD,CAAvB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD,CALuC,CAAjC;AAOP,OAAO,MAAM;AAAEZ,EAAAA,OAAF;AAAWH,EAAAA,IAAX;AAAiBE,EAAAA;AAAjB,IAA4BL,QAAQ,CAACuB,OAA3C;AAEP,eAAevB,QAAQ,CAACwB,OAAxB","sourcesContent":["import {\n  createSlice,\n  Dictionary,\n  nanoid,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { AppState, createAppThunk } from \"./store\";\nimport * as modal from \"./modal/modal.slice\";\n\ntype Marked = { imageID: number; reasonIDs: string[] };\n\nexport type Reason = { id: string; label: string };\n\ninterface TrainerState {\n  imageID: number;\n  screen: \"pick\" | \"modal\" | \"report\";\n  marked: Marked[];\n  reasons: Reason[];\n}\n\nconst initialState: TrainerState = {\n  imageID: 0,\n  screen: \"pick\",\n  marked: [],\n  reasons: [\n    { id: \"bg\", label: \"Background\" },\n    { id: \"eyes\", label: \"Eyes\" },\n  ],\n};\n\nconst appSlice = createSlice({\n  name: \"trainer\",\n  initialState,\n  reducers: {\n    real: (state) => {\n      state.imageID = (state.imageID + 1) % 16;\n    },\n    unreal: (state) => {\n      state.screen = \"modal\";\n    },\n    confirm: (\n      state,\n      action: PayloadAction<{ reasonIDs: string[]; other?: Reason }>\n    ) => {\n      const { reasonIDs, other } = action.payload;\n      const mark: Marked = { imageID: state.imageID, reasonIDs };\n\n      if (other) {\n        state.reasons.push(other);\n        mark.reasonIDs.push(other.id);\n      }\n\n      state.marked.push(mark);\n      state.screen = \"pick\";\n      state.imageID = (state.imageID + 1) % 16;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(modal.cancel, (state) => {\n      state.screen = \"pick\";\n    });\n  },\n});\n\nexport const initialise = createAppThunk(\"trainer/init\", async () => {\n  const response = await axios.get(\"http://localhost:3000/api/v1/image?id=1\", {\n    responseType: \"stream\",\n  });\n  console.log(response);\n});\n\nexport const { confirm, real, unreal } = appSlice.actions;\n\nexport default appSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}