{"ast":null,"code":"var _jsxFileName = \"/home/tomw/ai-trainer/client/src/modal/Modal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./modal.module.css\";\nimport { connect } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { nanoid } from \"nanoid\";\nimport { confirm } from \"../app.slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = _ref => {\n  _s();\n\n  let {\n    show,\n    reasons,\n    selected,\n    select,\n    confirm\n  } = _ref;\n  const [otherReason, setOtherReason] = useState(\"\");\n  const [checked, setChecked] = useState(reasons.reduce((obj, item) => Object.assign(obj, {\n    [item.id]: false\n  }), {}));\n\n  const handleSubmit = () => {\n    const reasonIDs = reasons.map(r => r.id).filter(id => !!selected[id]);\n    const other = otherReason ? {\n      id: nanoid(),\n      label: otherReason\n    } : undefined;\n    confirm(reasonIDs, other);\n  };\n\n  if (!show) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.modal,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Why\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: reasons.map((r, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [r.label, /*#__PURE__*/_jsxDEV(\"input\", {\n          value: r.id,\n          checked: !!selected[r.id],\n          onChange: () => select(r.id),\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Other:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: otherReason,\n        onChange: e => setOtherReason(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"qeVfapyKUnjDgCQrEWFU6sIZL3M=\");\n\n_c = Modal;\n\nconst mapStateToProps = state => {\n  return {\n    show: state.app.screen === \"modal\",\n    reasons: Object.values(state.app.reasons),\n    selected: state.modal.selected\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    select: id => {\n      dispatch(toggleReason({\n        id\n      }));\n    },\n    confirm: (reasonIDs, other) => {\n      dispatch(confirm({\n        reasonIDs,\n        other\n      }));\n    }\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/modal/Modal.tsx"],"names":["React","useState","styles","connect","toggleReason","nanoid","confirm","Modal","show","reasons","selected","select","otherReason","setOtherReason","checked","setChecked","reduce","obj","item","Object","assign","id","handleSubmit","reasonIDs","map","r","filter","other","label","undefined","modal","i","e","target","value","mapStateToProps","state","app","screen","values","mapDispatchToProps","dispatch","connector"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport {\n  AppDispatch,\n  AppState,\n  useAppDispatch,\n  useAppSelector,\n} from \"../store\";\nimport styles from \"./modal.module.css\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { nanoid } from \"nanoid\";\nimport { confirm, Reason } from \"../app.slice\";\nimport { Dictionary } from \"@reduxjs/toolkit\";\ntype Props = ConnectedProps<typeof connector>;\n\nconst Modal: FC<Props> = ({ show, reasons, selected, select, confirm }) => {\n  const [otherReason, setOtherReason] = useState(\"\");\n  const [checked, setChecked] = useState<Dictionary<boolean>>(\n    reasons.reduce((obj, item) => Object.assign(obj, { [item.id]: false }), {})\n  );\n\n  const handleSubmit = () => {\n    const reasonIDs = reasons.map((r) => r.id).filter((id) => !!selected[id]);\n    const other = otherReason\n      ? { id: nanoid(), label: otherReason }\n      : undefined;\n\n    confirm(reasonIDs, other);\n  };\n\n  if (!show) return null;\n\n  return (\n    <div className={styles.modal}>\n      <h3>Why</h3>\n      <div>\n        {reasons.map((r, i) => (\n          <label>\n            {r.label}\n            <input\n              value={r.id}\n              checked={!!selected[r.id]}\n              onChange={() => select(r.id)}\n              type=\"checkbox\"\n            />\n          </label>\n        ))}\n      </div>\n      <label>\n        Other:\n        <input\n          type=\"text\"\n          value={otherReason}\n          onChange={(e) => setOtherReason(e.target.value)}\n        />\n      </label>\n      <div>\n        <button>Cancel</button>\n        <button onClick={handleSubmit}>Confirm</button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    show: state.app.screen === \"modal\",\n    reasons: Object.values(state.app.reasons),\n    selected: state.modal.selected,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\n  return {\n    select: (id: string) => {\n      dispatch(toggleReason({ id }));\n    },\n    confirm: (reasonIDs: string[], other?: Reason) => {\n      dispatch(confirm({ reasonIDs, other }));\n    },\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n"]},"metadata":{},"sourceType":"module"}