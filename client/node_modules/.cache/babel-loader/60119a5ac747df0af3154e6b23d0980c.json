{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { createAppThunk } from \"./store\";\nimport * as modal from \"./modal/modal.slice\";\nconst initialState = {\n  imageID: 0,\n  screen: \"pick\",\n  marked: [],\n  reasons: {\n    bg: {\n      id: \"bg\",\n      label: \"Background\"\n    },\n    eyes: {\n      id: \"eyes\",\n      label: \"Eyes\"\n    }\n  }\n};\nconst appSlice = createSlice({\n  name: \"trainer\",\n  initialState,\n  reducers: {\n    real: state => {\n      state.imageID = (state.imageID + 1) % 16;\n    },\n    unreal: state => {\n      state.screen = \"modal\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(modal.cancel, state => {\n      state.screen = \"pick\";\n    });\n  }\n});\nexport const confirm = createAppThunk(\"modal/confirm\", (_, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const state = getState();\n  const selectedReasons = Object.entries(state.modal.selected).filter(_ref2 => {\n    let [key, val] = _ref2;\n    return !!val;\n  }).map(_ref3 => {\n    let [key] = _ref3;\n    return state.app.reasons[key];\n  });\n\n  if (state.modal.otherReasonLabel) {\n    const reason = {\n      id: nanoid(),\n      label: state.modal.otherReasonLabel\n    };\n  }\n});\nexport const initialise = createAppThunk(\"trainer/init\", async () => {\n  const response = await axios.get(\"http://localhost:3000/api/v1/image?id=1\", {\n    responseType: \"stream\"\n  });\n  console.log(response);\n});\nexport const {\n  real,\n  unreal\n} = appSlice.actions;\nexport default appSlice.reducer;","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/app.slice.ts"],"names":["createSlice","nanoid","axios","createAppThunk","modal","initialState","imageID","screen","marked","reasons","bg","id","label","eyes","appSlice","name","reducers","real","state","unreal","extraReducers","builder","addCase","cancel","confirm","_","getState","selectedReasons","Object","entries","selected","filter","key","val","map","app","otherReasonLabel","reason","initialise","response","get","responseType","console","log","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAkCC,MAAlC,QAAgD,kBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAmBC,cAAnB,QAAyC,SAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AAaA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,OAAO,EAAE,CADwB;AAEjCC,EAAAA,MAAM,EAAE,MAFyB;AAGjCC,EAAAA,MAAM,EAAE,EAHyB;AAIjCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,EAAE,EAAE;AAAEC,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,KAAK,EAAE;AAAnB,KADG;AAEPC,IAAAA,IAAI,EAAE;AAAEF,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,KAAK,EAAE;AAArB;AAFC;AAJwB,CAAnC;AAUA,MAAME,QAAQ,GAAGd,WAAW,CAAC;AAC3Be,EAAAA,IAAI,EAAE,SADqB;AAE3BV,EAAAA,YAF2B;AAG3BW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAGC,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACZ,OAAN,GAAgB,CAACY,KAAK,CAACZ,OAAN,GAAgB,CAAjB,IAAsB,EAAtC;AACD,KAHO;AAIRa,IAAAA,MAAM,EAAGD,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACX,MAAN,GAAe,OAAf;AACD;AANO,GAHiB;AAW3Ba,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBlB,KAAK,CAACmB,MAAtB,EAA+BL,KAAD,IAAW;AACvCA,MAAAA,KAAK,CAACX,MAAN,GAAe,MAAf;AACD,KAFD;AAGD;AAf0B,CAAD,CAA5B;AAkBA,OAAO,MAAMiB,OAAO,GAAGrB,cAAc,CAAC,eAAD,EAAkB,CAACsB,CAAD,WAAqB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1E,QAAMR,KAAK,GAAGQ,QAAQ,EAAtB;AAEA,QAAMC,eAAe,GAAGC,MAAM,CAACC,OAAP,CAAeX,KAAK,CAACd,KAAN,CAAY0B,QAA3B,EACrBC,MADqB,CACd;AAAA,QAAC,CAACC,GAAD,EAAMC,GAAN,CAAD;AAAA,WAAgB,CAAC,CAACA,GAAlB;AAAA,GADc,EAErBC,GAFqB,CAEjB;AAAA,QAAC,CAACF,GAAD,CAAD;AAAA,WAAWd,KAAK,CAACiB,GAAN,CAAU1B,OAAV,CAAkBuB,GAAlB,CAAX;AAAA,GAFiB,CAAxB;;AAIA,MAAId,KAAK,CAACd,KAAN,CAAYgC,gBAAhB,EAAkC;AAChC,UAAMC,MAAc,GAAG;AACrB1B,MAAAA,EAAE,EAAEV,MAAM,EADW;AAErBW,MAAAA,KAAK,EAAEM,KAAK,CAACd,KAAN,CAAYgC;AAFE,KAAvB;AAID;AACF,CAboC,CAA9B;AAeP,OAAO,MAAME,UAAU,GAAGnC,cAAc,CAAC,cAAD,EAAiB,YAAY;AACnE,QAAMoC,QAAQ,GAAG,MAAMrC,KAAK,CAACsC,GAAN,CAAU,yCAAV,EAAqD;AAC1EC,IAAAA,YAAY,EAAE;AAD4D,GAArD,CAAvB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD,CALuC,CAAjC;AAOP,OAAO,MAAM;AAAEtB,EAAAA,IAAF;AAAQE,EAAAA;AAAR,IAAmBL,QAAQ,CAAC8B,OAAlC;AAEP,eAAe9B,QAAQ,CAAC+B,OAAxB","sourcesContent":["import { createSlice, Dictionary, nanoid } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { AppState, createAppThunk } from \"./store\";\nimport * as modal from \"./modal/modal.slice\";\n\ntype Marked = { imageID: string; reasonIDs: string[] };\n\ntype Reason = { id: string; label: string };\n\ninterface TrainerState {\n  imageID: number;\n  screen: \"pick\" | \"modal\" | \"report\";\n  marked: Marked[];\n  reasons: Dictionary<Reason>;\n}\n\nconst initialState: TrainerState = {\n  imageID: 0,\n  screen: \"pick\",\n  marked: [],\n  reasons: {\n    bg: { id: \"bg\", label: \"Background\" },\n    eyes: { id: \"eyes\", label: \"Eyes\" },\n  },\n};\n\nconst appSlice = createSlice({\n  name: \"trainer\",\n  initialState,\n  reducers: {\n    real: (state) => {\n      state.imageID = (state.imageID + 1) % 16;\n    },\n    unreal: (state) => {\n      state.screen = \"modal\";\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(modal.cancel, (state) => {\n      state.screen = \"pick\";\n    });\n  },\n});\n\nexport const confirm = createAppThunk(\"modal/confirm\", (_, { getState }) => {\n  const state = getState();\n\n  const selectedReasons = Object.entries(state.modal.selected)\n    .filter(([key, val]) => !!val)\n    .map(([key]) => state.app.reasons[key]);\n\n  if (state.modal.otherReasonLabel) {\n    const reason: Reason = {\n      id: nanoid(),\n      label: state.modal.otherReasonLabel,\n    };\n  }\n});\n\nexport const initialise = createAppThunk(\"trainer/init\", async () => {\n  const response = await axios.get(\"http://localhost:3000/api/v1/image?id=1\", {\n    responseType: \"stream\",\n  });\n  console.log(response);\n});\n\nexport const { real, unreal } = appSlice.actions;\n\nexport default appSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}