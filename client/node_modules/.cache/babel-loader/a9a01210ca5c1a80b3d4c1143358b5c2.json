{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { createAppThunk } from \"./store\";\nimport * as modal from \"./modal/modal.slice\";\n\nfunction nextReasonID(reasons) {\n  const maxId = reasons.reduce((maxId, reason) => Math.max(reason.id, maxId), -1);\n  return maxId + 1;\n}\n\nconst initialState = {\n  imageID: 0,\n  screen: \"pick\",\n  marked: {},\n  reasons: [{\n    id: 0,\n    label: \"Background\"\n  }, {\n    id: 1,\n    label: \"Eyes\"\n  }]\n};\nconst appSlice = createSlice({\n  name: \"trainer\",\n  initialState,\n  reducers: {\n    real: state => {\n      state.imageID = (state.imageID + 1) % 16;\n    },\n    unreal: state => {\n      state.screen = \"modal\";\n    },\n    confirm: (state, action) => {\n      const {\n        reasonIDs,\n        otherReason\n      } = action.payload;\n      const mark = {\n        imageID: state.imageID,\n        reasonIDs\n      };\n      state.marked[state.imageID] = {\n        imageID: state.imageID,\n        reasonIDs\n      };\n\n      if (otherReason) {\n        var _state$marked$state$i;\n\n        const id = nextReasonID(state.reasons);\n        state.reasons.push({\n          id,\n          label: otherReason\n        });\n        (_state$marked$state$i = state.marked[state.imageID]) === null || _state$marked$state$i === void 0 ? void 0 : _state$marked$state$i.reasonIDs.push(id);\n      }\n\n      state.screen = \"pick\";\n      state.imageID = (state.imageID + 1) % 16;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(modal.cancel, state => {\n      state.screen = \"pick\";\n    });\n  }\n});\nexport const initialise = createAppThunk(\"trainer/init\", async () => {\n  const response = await axios.get(\"http://localhost:3000/api/v1/image?id=1\", {\n    responseType: \"stream\"\n  });\n  console.log(response);\n});\nexport const {\n  confirm,\n  real,\n  unreal\n} = appSlice.actions;\nexport default appSlice.reducer;","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/app.slice.ts"],"names":["createSlice","axios","createAppThunk","modal","nextReasonID","reasons","maxId","reduce","reason","Math","max","id","initialState","imageID","screen","marked","label","appSlice","name","reducers","real","state","unreal","confirm","action","reasonIDs","otherReason","payload","mark","push","extraReducers","builder","addCase","cancel","initialise","response","get","responseType","console","log","actions","reducer"],"mappings":"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","sourcesContent":["import {\n  createSlice,\n  Dictionary,\n  nanoid,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { AppState, createAppThunk } from \"./store\";\nimport * as modal from \"./modal/modal.slice\";\n\nfunction nextReasonID(reasons: Reason[]) {\n  const maxId = reasons.reduce(\n    (maxId, reason) => Math.max(reason.id, maxId),\n    -1\n  );\n  return maxId + 1;\n}\n\ntype Marked = { imageID: number; reasonIDs: number[] };\n\nexport type Reason = { id: number; label: string };\n\ninterface TrainerState {\n  imageID: number;\n  screen: \"pick\" | \"modal\" | \"report\";\n  marked: Dictionary<Marked>;\n  reasons: Reason[];\n}\n\nconst initialState: TrainerState = {\n  imageID: 0,\n  screen: \"pick\",\n  marked: {},\n  reasons: [\n    { id: 0, label: \"Background\" },\n    { id: 1, label: \"Eyes\" },\n  ],\n};\n\nconst appSlice = createSlice({\n  name: \"trainer\",\n  initialState,\n  reducers: {\n    real: (state) => {\n      state.imageID = (state.imageID + 1) % 16;\n    },\n    unreal: (state) => {\n      state.screen = \"modal\";\n    },\n    confirm: (state, action: PayloadAction<SubmitPhotoPayload>) => {\n      const { reasonIDs, otherReason } = action.payload;\n      const mark: Marked = { imageID: state.imageID, reasonIDs };\n\n      state.marked[state.imageID] = {\n        imageID: state.imageID,\n        reasonIDs,\n      };\n\n      if (otherReason) {\n        const id = nextReasonID(state.reasons);\n        state.reasons.push({ id, label: otherReason });\n        state.marked[state.imageID]?.reasonIDs.push(id);\n      }\n\n      state.screen = \"pick\";\n      state.imageID = (state.imageID + 1) % 16;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(modal.cancel, (state) => {\n      state.screen = \"pick\";\n    });\n  },\n});\n\nexport type SubmitPhotoPayload = {\n  reasonIDs: number[];\n  otherReason: string;\n};\n\nexport const initialise = createAppThunk(\"trainer/init\", async () => {\n  const response = await axios.get(\"http://localhost:3000/api/v1/image?id=1\", {\n    responseType: \"stream\",\n  });\n  console.log(response);\n});\n\nexport const { confirm, real, unreal } = appSlice.actions;\n\nexport default appSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}