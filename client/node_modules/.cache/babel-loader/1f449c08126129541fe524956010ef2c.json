{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\nimport { createAppThunk } from \"../store\";\nconst initialState = {\n  reasons: [{\n    id: \"bg\",\n    label: \"Background\"\n  }, {\n    id: \"eyes\",\n    label: \"Eyes\"\n  }],\n  otherReasonLabel: \"\",\n  selected: {}\n};\nconst modalSlice = createSlice({\n  name: \"modal\",\n  initialState,\n  reducers: {\n    toggleReason: (state, action) => {\n      state.selected[action.payload.id] = !state.selected[action.payload.id];\n    },\n    cancel: state => {}\n  },\n  extraReducers: builder => {\n    builder.addCase(confirm.fulfilled, (state, action) => {\n      // Clear form\n      state;\n    });\n  }\n});\nexport const confirm = createAppThunk(\"modal/confirm\", (_, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const state = getState();\n  const selectedReasons = Object.entries(state.modal.selected).filter(_ref2 => {\n    let [key, val] = _ref2;\n    return !!val;\n  });\n\n  if (state.modal.otherReasonLabel) {\n    const reason = {\n      id: nanoid(),\n      label: state.modal.otherReasonLabel\n    };\n  }\n});\nexport const {\n  cancel,\n  toggleReason\n} = modalSlice.actions;\nexport default modalSlice.reducer;","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/modal/modal.slice.ts"],"names":["createSlice","nanoid","createAppThunk","initialState","reasons","id","label","otherReasonLabel","selected","modalSlice","name","reducers","toggleReason","state","action","payload","cancel","extraReducers","builder","addCase","confirm","fulfilled","_","getState","selectedReasons","Object","entries","modal","filter","key","val","reason","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAAuD,kBAAvD;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAAmBC,cAAnB,QAAyC,UAAzC;AAUA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,OAAO,EAAE,CACP;AAAEC,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GADO,EAEP;AAAED,IAAAA,EAAE,EAAE,MAAN;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAFO,CADsB;AAK/BC,EAAAA,gBAAgB,EAAE,EALa;AAM/BC,EAAAA,QAAQ,EAAE;AANqB,CAAjC;AASA,MAAMC,UAAU,GAAGT,WAAW,CAAC;AAC7BU,EAAAA,IAAI,EAAE,OADuB;AAE7BP,EAAAA,YAF6B;AAG7BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAkD;AAC9DD,MAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACC,OAAP,CAAeV,EAA9B,IAAoC,CAACQ,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACC,OAAP,CAAeV,EAA9B,CAArC;AACD,KAHO;AAIRW,IAAAA,MAAM,EAAGH,KAAD,IAAW,CAAE;AAJb,GAHmB;AAS7BI,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,OAAO,CAACC,SAAxB,EAAmC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpD;AAEAD,MAAAA,KAAK;AACN,KAJD;AAKD;AAf4B,CAAD,CAA9B;AAoBA,OAAO,MAAMO,OAAO,GAAGlB,cAAc,CAAC,eAAD,EAAkB,CAACoB,CAAD,WAAqB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1E,QAAMV,KAAK,GAAGU,QAAQ,EAAtB;AAEA,QAAMC,eAAe,GAAGC,MAAM,CAACC,OAAP,CAAeb,KAAK,CAACc,KAAN,CAAYnB,QAA3B,EAAqCoB,MAArC,CACtB;AAAA,QAAC,CAACC,GAAD,EAAMC,GAAN,CAAD;AAAA,WAAgB,CAAC,CAACA,GAAlB;AAAA,GADsB,CAAxB;;AAIA,MAAIjB,KAAK,CAACc,KAAN,CAAYpB,gBAAhB,EAAkC;AAChC,UAAMwB,MAAc,GAAG;AACrB1B,MAAAA,EAAE,EAAEJ,MAAM,EADW;AAErBK,MAAAA,KAAK,EAAEO,KAAK,CAACc,KAAN,CAAYpB;AAFE,KAAvB;AAID;AACF,CAboC,CAA9B;AAeP,OAAO,MAAM;AAAES,EAAAA,MAAF;AAAUJ,EAAAA;AAAV,IAA2BH,UAAU,CAACuB,OAA5C;AAEP,eAAevB,UAAU,CAACwB,OAA1B","sourcesContent":["import { createSlice, Dictionary, PayloadAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { nanoid } from \"nanoid\";\nimport { AppState, createAppThunk } from \"../store\";\n\ntype Reason = { id: string; label: string };\n\ninterface ModalState {\n  reasons: Reason[];\n  otherReasonLabel: string;\n  selected: Dictionary<boolean>;\n}\n\nconst initialState: ModalState = {\n  reasons: [\n    { id: \"bg\", label: \"Background\" },\n    { id: \"eyes\", label: \"Eyes\" },\n  ],\n  otherReasonLabel: \"\",\n  selected: {},\n};\n\nconst modalSlice = createSlice({\n  name: \"modal\",\n  initialState,\n  reducers: {\n    toggleReason: (state, action: PayloadAction<{ id: string }>) => {\n      state.selected[action.payload.id] = !state.selected[action.payload.id];\n    },\n    cancel: (state) => {},\n  },\n  extraReducers: (builder) => {\n    builder.addCase(confirm.fulfilled, (state, action) => {\n      // Clear form\n\n      state;\n    });\n  },\n});\n\ntype ConfirmDialogArgs = { otherReason?: Reason };\n\nexport const confirm = createAppThunk(\"modal/confirm\", (_, { getState }) => {\n  const state = getState();\n\n  const selectedReasons = Object.entries(state.modal.selected).filter(\n    ([key, val]) => !!val\n  );\n\n  if (state.modal.otherReasonLabel) {\n    const reason: Reason = {\n      id: nanoid(),\n      label: state.modal.otherReasonLabel,\n    };\n  }\n});\n\nexport const { cancel, toggleReason } = modalSlice.actions;\n\nexport default modalSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}