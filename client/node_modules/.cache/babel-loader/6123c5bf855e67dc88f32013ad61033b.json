{"ast":null,"code":"var _jsxFileName = \"/home/tomw/ai-trainer/client/src/modal/Modal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./modal.module.css\";\nimport { connect } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { confirm } from \"../app.slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = _ref => {\n  _s();\n\n  let {\n    show,\n    reasons,\n    confirm\n  } = _ref;\n  const [otherReason, setOtherReason] = useState(\"\");\n  const [checked, setChecked] = useState(reasons.reduce((obj, item) => ({ ...obj,\n    [item.id]: false\n  }), {}));\n\n  const handleToggle = id => {\n    const next = { ...checked,\n      [id]: !checked[id]\n    };\n    setChecked(next);\n  };\n\n  const handleSubmit = () => {\n    const reasonIDs = reasons.map(r => r.id).filter(id => checked[id]);\n    confirm({\n      reasonIDs,\n      otherReason\n    });\n  };\n\n  const buttonDisabled = !Object.values(checked).filter(active => !!active).length || !otherReason;\n  if (!show) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.modal,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Why\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: reasons.map((r, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [r.label, /*#__PURE__*/_jsxDEV(\"input\", {\n          value: r.id,\n          checked: !!checked[r.id],\n          onChange: () => handleToggle(r.id),\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Other:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: otherReason,\n        onChange: e => setOtherReason(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: buttonDisabled,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"Wfr5C7ApmtguJw7MQY9cxosK8ZI=\");\n\n_c = Modal;\n\nconst mapStateToProps = state => {\n  return {\n    show: state.app.screen === \"modal\",\n    reasons: Object.values(state.app.reasons),\n    selected: state.modal.selected\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    select: id => {\n      dispatch(toggleReason({\n        id\n      }));\n    },\n    confirm: arg => {\n      dispatch(confirm(arg));\n    }\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/modal/Modal.tsx"],"names":["React","useState","styles","connect","toggleReason","confirm","Modal","show","reasons","otherReason","setOtherReason","checked","setChecked","reduce","obj","item","id","handleToggle","next","handleSubmit","reasonIDs","map","r","filter","buttonDisabled","Object","values","active","length","modal","i","label","e","target","value","mapStateToProps","state","app","screen","selected","mapDispatchToProps","dispatch","select","arg","connector"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport {\n  AppDispatch,\n  AppState,\n  useAppDispatch,\n  useAppSelector,\n} from \"../store\";\nimport styles from \"./modal.module.css\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { nanoid } from \"nanoid\";\nimport { confirm, Reason, SubmitPhotoPayload } from \"../app.slice\";\nimport { Dictionary } from \"@reduxjs/toolkit\";\ntype Props = ConnectedProps<typeof connector>;\n\nconst Modal: FC<Props> = ({ show, reasons, confirm }) => {\n  const [otherReason, setOtherReason] = useState(\"\");\n  const [checked, setChecked] = useState<Dictionary<boolean>>(\n    reasons.reduce((obj, item) => ({ ...obj, [item.id]: false }), {})\n  );\n\n  const handleToggle = (id: number) => {\n    const next = { ...checked, [id]: !checked[id] };\n    setChecked(next);\n  };\n\n  const handleSubmit = () => {\n    const reasonIDs = reasons.map((r) => r.id).filter((id) => checked[id]);\n    confirm({ reasonIDs, otherReason });\n  };\n\n  const buttonDisabled =\n    !Object.values(checked).filter((active) => !!active).length || !otherReason;\n\n  if (!show) return null;\n\n  return (\n    <div className={styles.modal}>\n      <h3>Why</h3>\n      <div>\n        {reasons.map((r, i) => (\n          <label>\n            {r.label}\n            <input\n              value={r.id}\n              checked={!!checked[r.id]}\n              onChange={() => handleToggle(r.id)}\n              type=\"checkbox\"\n            />\n          </label>\n        ))}\n      </div>\n      <label>\n        Other:\n        <input\n          type=\"text\"\n          value={otherReason}\n          onChange={(e) => setOtherReason(e.target.value)}\n        />\n      </label>\n      <div>\n        <button>Cancel</button>\n        <button onClick={handleSubmit} disabled={buttonDisabled}>\n          Confirm\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    show: state.app.screen === \"modal\",\n    reasons: Object.values(state.app.reasons),\n    selected: state.modal.selected,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\n  return {\n    select: (id: string) => {\n      dispatch(toggleReason({ id }));\n    },\n    confirm: (arg: SubmitPhotoPayload) => {\n      dispatch(confirm(arg));\n    },\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n"]},"metadata":{},"sourceType":"module"}