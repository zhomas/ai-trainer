{"ast":null,"code":"var _jsxFileName = \"/home/tomw/ai-trainer/client/src/modal/Modal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./modal.module.css\";\nimport { connect } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { confirm } from \"../app.slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = _ref => {\n  _s();\n\n  let {\n    reasons,\n    confirm\n  } = _ref;\n  const [otherReason, setOtherReason] = useState(\"\");\n  const [checked, setChecked] = useState({});\n\n  const handleToggle = id => {\n    const next = { ...checked,\n      [id]: !checked[id]\n    };\n    setChecked(next);\n  };\n\n  const handleSubmit = () => {// const reasonIDs = reasons.map((r) => r.id).filter((id) => checked[id]);\n    // confirm({ reasonIDs, otherReason });\n  };\n\n  const checkedCount = Object.values(checked).filter(ch => !!ch).length;\n  const buttonEnabled = checkedCount > 0 || otherReason;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.modal,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Why\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(reasons).map((_ref2, i) => {\n        let [id, label] = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [label, /*#__PURE__*/_jsxDEV(\"input\", {\n            value: id,\n            checked: !!checked[id],\n            onChange: () => handleToggle(id),\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Other:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: otherReason,\n        onChange: e => setOtherReason(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: !buttonEnabled,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"uzG2s60ben8n+2fZHxWdWiKxEF0=\");\n\n_c = Modal;\n\nconst mapStateToProps = state => {\n  return {\n    reasons: state.app.reasons,\n    selected: state.modal.selected\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    select: id => {\n      dispatch(toggleReason({\n        id\n      }));\n    },\n    confirm: arg => {\n      dispatch(confirm(arg));\n    }\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(Modal);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Modal\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/tomw/ai-trainer/client/src/modal/Modal.tsx"],"names":["React","useState","styles","connect","toggleReason","confirm","Modal","reasons","otherReason","setOtherReason","checked","setChecked","handleToggle","id","next","handleSubmit","checkedCount","Object","values","filter","ch","length","buttonEnabled","modal","entries","map","i","label","e","target","value","mapStateToProps","state","app","selected","mapDispatchToProps","dispatch","select","arg","connector"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport {\n  AppDispatch,\n  AppState,\n  useAppDispatch,\n  useAppSelector,\n} from \"../store\";\nimport styles from \"./modal.module.css\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { toggleReason } from \"./modal.slice\";\nimport { confirm, SubmitPhotoPayload } from \"../app.slice\";\nimport { Dictionary } from \"@reduxjs/toolkit\";\ntype Props = ConnectedProps<typeof connector>;\n\nconst Modal: FC<Props> = ({ reasons, confirm }) => {\n  const [otherReason, setOtherReason] = useState(\"\");\n\n  const [checked, setChecked] = useState<Dictionary<boolean>>({});\n\n  const handleToggle = (id: string) => {\n    const next = { ...checked, [id]: !checked[id] };\n    setChecked(next);\n  };\n\n  const handleSubmit = () => {\n    // const reasonIDs = reasons.map((r) => r.id).filter((id) => checked[id]);\n    // confirm({ reasonIDs, otherReason });\n  };\n\n  const checkedCount = Object.values(checked).filter((ch) => !!ch).length;\n  const buttonEnabled = checkedCount > 0 || otherReason;\n\n  return (\n    <div className={styles.modal}>\n      <h3>Why</h3>\n      <div>\n        {Object.entries(reasons).map(([id, label], i) => (\n          <label>\n            {label}\n            <input\n              value={id}\n              checked={!!checked[id]}\n              onChange={() => handleToggle(id)}\n              type=\"checkbox\"\n            />\n          </label>\n        ))}\n      </div>\n      <label>\n        Other:\n        <input\n          type=\"text\"\n          value={otherReason}\n          onChange={(e) => setOtherReason(e.target.value)}\n        />\n      </label>\n      <div>\n        <button>Cancel</button>\n        <button onClick={handleSubmit} disabled={!buttonEnabled}>\n          Confirm\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    reasons: state.app.reasons,\n    selected: state.modal.selected,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\n  return {\n    select: (id: string) => {\n      dispatch(toggleReason({ id }));\n    },\n    confirm: (arg: SubmitPhotoPayload) => {\n      dispatch(confirm(arg));\n    },\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connector(Modal);\n"]},"metadata":{},"sourceType":"module"}